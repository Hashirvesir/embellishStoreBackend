import { jsxs as w, jsx as t } from "react/jsx-runtime";
import * as b from "react";
import c from "styled-components";
import { useControllableState as $ } from "../hooks/useControllableState.js";
import { useId as F } from "../hooks/useId.js";
import { useField as R } from "../Field/FieldContext.js";
import { Typography as y } from "../Typography/Typography.js";
import { Flex as u } from "../Flex/Flex.js";
import { inputFocusStyle as B } from "../themes/utils.js";
import { Field as W } from "../Field/Field.js";
import { FieldLabel as v } from "../Field/FieldLabel.js";
import { FieldHint as S } from "../Field/FieldHint.js";
import { FieldError as j } from "../Field/FieldError.js";
import { TextButton as q } from "../TextButton/TextButton.js";
const z = b.forwardRef(({ offLabel: n, onLabel: h, disabled: e, checked: a, onChange: s, size: l = "M", ...f }, m) => {
  const [r = !1, p] = $({
    prop: a
  }), { error: d, id: o, name: g, required: x } = R(), i = r !== null && !r, T = `${o}-hint`, I = `${o}-error`;
  return w(E, { position: "relative", hasRadius: !0, padding: 1, background: e ? "neutral150" : "neutral100", borderStyle: "solid", borderWidth: "1px", borderColor: "neutral200", wrap: "wrap", cursor: e ? "not-allowed" : "pointer", hasError: !!d, children: [t(C, { hasRadius: !0, flex: "1 1 50%", paddingTop: 2, paddingBottom: 2, paddingLeft: 3, paddingRight: 3, justifyContent: "center", background: e && i ? "neutral200" : i ? "neutral0" : "transparent", borderColor: e && i ? "neutral300" : i ? "neutral200" : e ? "neutral150" : "neutral100", size: l, children: t(y, { variant: "pi", fontWeight: "bold", textTransform: "uppercase", textColor: e ? "neutral700" : i ? "danger700" : "neutral600", children: n }) }), t(C, { hasRadius: !0, flex: "1 1 50%", paddingLeft: 3, paddingRight: 3, justifyContent: "center", background: e && r ? "neutral200" : r ? "neutral0" : "transparent", borderColor: e && r ? "neutral300" : r ? "neutral200" : e ? "neutral150" : "neutral100", size: l, children: t(y, { variant: "pi", fontWeight: "bold", textTransform: "uppercase", textColor: e ? "neutral700" : r ? "primary600" : "neutral600", children: h }) }), t(L, { ...f, ref: m, onChange: (k) => {
    p(k.currentTarget.checked), s?.(k);
  }, type: "checkbox", id: o, name: g, "aria-required": x, disabled: e, "aria-disabled": e, "aria-describedby": o ? `${T} ${I}` : void 0, checked: !!r })] });
}), E = c(u)`
  ${B()}
`, C = c(u)`
  /**
    We declare the defined value because we want the height of the input when 
    the values are in a row to be 40px. But defining a height on the label
    would break the input when it wraps.
  */
  padding-top: ${({ size: n }) => `${n === "S" ? "2px" : "6px"}`};
  padding-bottom: ${({ size: n }) => `${n === "S" ? "2px" : "6px"}`};
`, L = c.input`
  height: 100%;
  left: 0;
  opacity: 0;
  position: absolute;
  top: 0;
  z-index: 0;
  width: 100%;
`, Y = b.forwardRef(({ disabled: n = !1, error: h, hint: e, label: a, name: s, labelAction: l, required: f = !1, id: m, onClear: r, clearLabel: p, checked: d, ...o }, g) => {
  const x = F(m);
  return t(W, { name: s, hint: e, error: h, id: x, required: f, maxWidth: "320px", children: w(u, { direction: "column", alignItems: "stretch", gap: 1, children: [w(u, { children: [a ? t(v, { action: l, children: a }) : null, p && r && d !== null && !n && t(H, { onClick: r, children: p })] }), t(z, { ref: g, checked: d, disabled: n, ...o }), t(S, {}), t(j, {})] }) });
}), H = c(q)`
  align-self: flex-end;
  margin-left: auto;
`;
export {
  Y as ToggleInput
};
