import { jsx as r, jsxs as M } from "react/jsx-runtime";
import * as l from "react";
import { Clock as S } from "@strapi/icons";
import $ from "styled-components";
import { ComboboxInput as v, Option as L } from "../Combobox/Combobox.js";
import { useDesignSystem as P } from "../DesignSystemProvider.js";
import { useControllableState as R } from "../hooks/useControllableState.js";
import { useDateFormatter as j } from "../hooks/useDateFormatter.js";
import { useId as V } from "../hooks/useId.js";
import { Field as E } from "../Field/Field.js";
import { Flex as O } from "../Flex/Flex.js";
import { FieldLabel as _ } from "../Field/FieldLabel.js";
import { FieldHint as q } from "../Field/FieldHint.js";
import { FieldError as z } from "../Field/FieldError.js";
const b = (o) => !!o.match(/^[^a-zA-Z]*$/), H = l.forwardRef(({
  id: o,
  step: a = 15,
  /**
   * @preserve
   * @deprecated This is no longer used.
   */
  ariaLabel: C,
  /**
   * @preserve
   * @deprecated This is no longer used.
   */
  selectButtonTitle: x,
  value: n,
  defaultValue: c,
  onChange: f,
  ...d
}, m) => {
  const k = P("TimePicker"), I = V(o), [A, s] = l.useState(""), [w, p] = R({
    prop: n,
    defaultProp: c,
    onChange: f
  }), u = j(k.locale, {
    hour: "2-digit",
    minute: "2-digit",
    hour12: !1
  }), h = l.useMemo(() => {
    const e = u.formatToParts(/* @__PURE__ */ new Date()), { value: t } = e.find((i) => i.type === "literal");
    return t;
  }, [u]), F = l.useMemo(() => {
    const e = 60 / a;
    return [...Array(24).keys()].flatMap((t) => [...Array(e).keys()].map((i) => u.format(new Date(0, 0, 0, t, i * a))));
  }, [a, u]), N = (e) => {
    (!e || b(e)) && s(e);
  }, y = (e) => {
    const [t, i] = e.split(h);
    if (!t && !i)
      return;
    const T = Number(t ?? "0"), g = Number(i ?? "0");
    if (!(T > 23 || g > 59))
      return u.format(new Date(0, 0, 0, T, g));
  }, B = (e) => {
    const t = y(e.target.value);
    t ? (s(t), p(t)) : s(w);
  }, D = (e) => {
    if (typeof e < "u") {
      const t = y(e);
      p(t);
    } else
      p(e);
  };
  return l.useEffect(() => {
    const e = typeof n > "u" ? "" : n;
    b(e) && s(e);
  }, [n, s]), r(v, { ...d, ref: m, value: w, onChange: D, isPrintableCharacter: b, allowCustomValue: !0, placeholder: `--${h}--`, autocomplete: "none", startIcon: r(Z, {}), id: I, inputMode: "numeric", pattern: `\\d{2}\\${h}\\d{2}`, textValue: A, onTextValueChange: N, onBlur: B, children: F.map((e) => r(L, { value: e, children: e }, e)) });
}), Z = $(S)`
  height: 1rem;
  width: 1rem;

  & > path {
    fill: ${({ theme: o }) => o.colors.neutral500};
  }
`, ae = l.forwardRef(({ label: o, error: a, hint: C, id: x, required: n, labelAction: c, ...f }, d) => {
  const m = V(x);
  return r(E, { hint: C, error: a, id: m, required: n, children: M(O, { direction: "column", alignItems: "stretch", gap: 1, children: [r(_, { action: c, children: o }), r(H, { ref: d, id: m, error: a, required: n, ...f }), r(q, {}), r(z, {})] }) });
});
export {
  ae as TimePicker,
  H as TimePickerInput
};
