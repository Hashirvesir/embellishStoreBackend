import { jsx as r, jsxs as s } from "react/jsx-runtime";
import * as a from "react";
import c from "styled-components";
import { useId as p } from "../hooks/useId.js";
import { useField as x } from "../Field/FieldContext.js";
import { Typography as h } from "../Typography/Typography.js";
import { BaseCheckbox as b } from "../BaseCheckbox/BaseCheckbox.js";
import { Field as u } from "../Field/Field.js";
import { Flex as g } from "../Flex/Flex.js";
import { Box as k } from "../Box/Box.js";
import { FieldHint as y } from "../Field/FieldHint.js";
import { FieldError as C } from "../Field/FieldError.js";
const F = c(h)`
  display: flex;
  align-items: flex-start;
  * {
    cursor: ${({ disabled: e }) => e ? "not-allowed" : "pointer"};
  }
`, w = a.forwardRef((e, o) => {
  const { id: i } = x();
  return r(b, { ref: o, id: i, ...e });
}), v = a.forwardRef(({ children: e, disabled: o = !1, id: i, hint: m, error: d, ...f }, n) => {
  const t = p(i);
  let l;
  return d ? l = `${t}-error` : m && (l = `${t}-hint`), r(u, { id: t, hint: m, error: d, children: s(g, { direction: "column", alignItems: "stretch", gap: 1, children: [s(F, { as: "label", textColor: "neutral800", disabled: o, children: [r(w, { ref: n, disabled: o, "aria-describedby": l, ...f }), r(k, { paddingLeft: 2, children: e })] }), r(y, {}), r(C, {})] }) });
});
export {
  v as Checkbox
};
